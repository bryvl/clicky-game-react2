{"version":3,"sources":["components/Score.js","components/TopScore.js","components/Directions/index.js","components/Header/index.js","components/Board/index.js","components/LegendCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","react_default","a","createElement","style","color","score","TopScore","topScore","Directions","Header","className","Board","children","LegendCard","role","aria-label","onClick","handleClick","id","name","alt","src","image","Wrapper","App","state","legends","handleCardClick","guessIsCorrect","legendsMap","_this","map","legend","newLegend","Object","objectSpread","clicked","handleCorrectGuess","handleIncorrectGuess","_this$state","newScore","newTopScore","Math","max","setState","randomizeLegends","length","reset","alert","counter","j","floor","random","holder","cards","resetCards","this","_this2","components_Wrapper","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33c94484.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nexport default function Score(props) {\n  return (\n    <span style={{color: \"white\"}}><strong>Score: </strong> {props.score}</span>\n  );\n}\n","import React from 'react';\nimport '../App.css';\n\nexport default function TopScore(props) {\n  return (\n    <span style={{color: \"white\"}}><strong>TopScore: </strong> {props.topScore}</span>\n  );\n}\n","import React from 'react';\n\n\nexport default function Directions(props) {\n  return (\n    <h3> Try to guess/click each item item only once. <br/>Clicking one more than once will reset the board and you will lose. <br/> Click an image to begin playing! </h3>\n  );\n}\n","import React from 'react';\nimport Score from '../Score'\nimport TopScore from '../TopScore'\nimport Directions from \"../Directions\";\nimport './style.css';\n\nexport default function Header(props) {\n  return (\n    <header className=\"header\">\n        <h1>League of Clicks</h1>\n        {props.score === 0 ? <Directions/> : \"\"}\n        <Score score={props.score}></Score> | <TopScore topScore={props.topScore}></TopScore>\n    </header>\n\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Board(props) {\n  return <main className=\"board\">{props.children}</main>;\n};\n","import React from 'react';\nimport './style.css'\n\nexport default function LegendCard(props) {\n  return (\n    <div role=\"img\" aria-label=\"click item\" className=\"card\" onClick={() => props.handleClick(props.id)}>\n      <h2>{props.name}</h2>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image}/>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Header from './components/Header'\nimport Board from './components/Board/'\nimport LegendCard from './components/LegendCard'\nimport Wrapper from './components/Wrapper'\nimport legends from './legends.json'\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    legends,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ legends: this.randomizeLegends(this.state.legends) });\n  };\n  // **Notes for me**\n  // Ideas on how to make more presentable: Think about turning this into TFT-like clone. User is given random choices from League of Legends api. \n  // User can spend gold they get every round to buy a unit, tier rank up system more simple like 1 star= 1 rank. Units have hp and atk. They can die \n  // and be discarded. Pit up against enemy \"ai\".\n\n  // ------------------Handle Click Stuff------------------------------------------------------------------------\n\n  handleCardClick = (id) => {\n    let guessIsCorrect = false;\n    const legendsMap = this.state.legends.map(legend => {\n      const newLegend = { ...legend };\n      if (newLegend.id === id) {\n        if (!newLegend.clicked) {\n          newLegend.clicked = true;\n          guessIsCorrect = true;\n        }\n      }\n      return newLegend;\n    });\n    guessIsCorrect ? this.handleCorrectGuess(legendsMap) : this.handleIncorrectGuess(legendsMap);\n  };\n\n  handleCorrectGuess = (legendsMap) => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n    this.setState({\n      legends: this.randomizeLegends(legendsMap),\n      score: newScore,\n      topScore: newTopScore\n    });\n    if (newScore === legendsMap.length){\n      this.reset(legendsMap);\n      return alert(\"You've won!\");\n    }\n  };\n\n  handleIncorrectGuess = (legends) => {\n    this.setState({\n      legends: this.reset(legends),\n      score: 0\n    });\n  };\n\n  // ----------------Randomization and Reset--------------------------------------------------------------------------\n  // Google search helped with randomizeLegends function, not gonna lie. I 100% understand what it's doing and I had an idea of what to do\n  // but didn't put this together completely on my own. https://www.w3resource.com/javascript-exercises/javascript-array-exercise-17.php\n\n  randomizeLegends = (legends) => {\n    let counter = legends.length - 1;\n    while (counter > 0) {\n      const j = Math.floor(Math.random() * (counter + 1));\n      const holder = legends[counter];\n      legends[counter] = legends[j];\n      legends[j] = holder;\n      counter--;\n    }\n    return legends;\n  };\n\n  reset = (cards) => {\n    const resetCards = legends.map(legend => ({ ...legend, clicked: false, score: 0 }));\n    return this.randomizeLegends(resetCards);\n  };\n\n  // ------------------------------------------------------------------------------------------\n\n  render(){\n    return (\n      <Wrapper>\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n        ></Header>\n        <Board>\n          {this.state.legends.map(legend => (\n            <LegendCard\n              key={legend.id}\n              id={legend.id}\n              name={legend.name}\n              image={legend.image}\n              handleClick={this.handleCardClick}\n            />\n            ))}\n        </Board>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}